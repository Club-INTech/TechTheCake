# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_recherche_chemin', [dirname(__file__)])
        except ImportError:
            import _recherche_chemin
            return _recherche_chemin
        if fp is not None:
            try:
                _mod = imp.load_module('_recherche_chemin', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _recherche_chemin = swig_import_helper()
    del swig_import_helper
else:
    import _recherche_chemin
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class VisilibityWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisilibityWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisilibityWrapper, name)
    __repr__ = _swig_repr
    RETURN_OK = _recherche_chemin.VisilibityWrapper_RETURN_OK
    ENVIRONMENT_IS_NOT_VALID = _recherche_chemin.VisilibityWrapper_ENVIRONMENT_IS_NOT_VALID
    def __init__(self, *args): 
        this = _recherche_chemin.new_VisilibityWrapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def tolerance_cv(self, *args) -> "void" : return _recherche_chemin.VisilibityWrapper_tolerance_cv(self, *args)
    def epsilon_vis(self, *args) -> "void" : return _recherche_chemin.VisilibityWrapper_epsilon_vis(self, *args)
    def define_map_dimensions(self, *args) -> "void" : return _recherche_chemin.VisilibityWrapper_define_map_dimensions(self, *args)
    def add_rectangle(self, *args) -> "void" : return _recherche_chemin.VisilibityWrapper_add_rectangle(self, *args)
    def add_circle(self, *args) -> "void" : return _recherche_chemin.VisilibityWrapper_add_circle(self, *args)
    def nb_obstacles(self) -> "int" : return _recherche_chemin.VisilibityWrapper_nb_obstacles(self)
    def nb_vertices(self, *args) -> "int" : return _recherche_chemin.VisilibityWrapper_nb_vertices(self, *args)
    def get_obstacle_vertice(self, *args) -> "VisiLibity::Point" : return _recherche_chemin.VisilibityWrapper_get_obstacle_vertice(self, *args)
    def build_environment(self) -> "VisilibityWrapper::Exception" : return _recherche_chemin.VisilibityWrapper_build_environment(self)
    def reset_environment(self) -> "void" : return _recherche_chemin.VisilibityWrapper_reset_environment(self)
    def path(self, *args) -> "VisiLibity::Polyline" : return _recherche_chemin.VisilibityWrapper_path(self, *args)
    __swig_destroy__ = _recherche_chemin.delete_VisilibityWrapper
    __del__ = lambda self : None;
VisilibityWrapper_swigregister = _recherche_chemin.VisilibityWrapper_swigregister
VisilibityWrapper_swigregister(VisilibityWrapper)


def uniform_random_sample(*args) -> "float" :
  return _recherche_chemin.uniform_random_sample(*args)
uniform_random_sample = _recherche_chemin.uniform_random_sample
class Bounding_Box(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bounding_Box, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bounding_Box, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x_min"] = _recherche_chemin.Bounding_Box_x_min_set
    __swig_getmethods__["x_min"] = _recherche_chemin.Bounding_Box_x_min_get
    if _newclass:x_min = _swig_property(_recherche_chemin.Bounding_Box_x_min_get, _recherche_chemin.Bounding_Box_x_min_set)
    __swig_setmethods__["x_max"] = _recherche_chemin.Bounding_Box_x_max_set
    __swig_getmethods__["x_max"] = _recherche_chemin.Bounding_Box_x_max_get
    if _newclass:x_max = _swig_property(_recherche_chemin.Bounding_Box_x_max_get, _recherche_chemin.Bounding_Box_x_max_set)
    __swig_setmethods__["y_min"] = _recherche_chemin.Bounding_Box_y_min_set
    __swig_getmethods__["y_min"] = _recherche_chemin.Bounding_Box_y_min_get
    if _newclass:y_min = _swig_property(_recherche_chemin.Bounding_Box_y_min_get, _recherche_chemin.Bounding_Box_y_min_set)
    __swig_setmethods__["y_max"] = _recherche_chemin.Bounding_Box_y_max_set
    __swig_getmethods__["y_max"] = _recherche_chemin.Bounding_Box_y_max_get
    if _newclass:y_max = _swig_property(_recherche_chemin.Bounding_Box_y_max_get, _recherche_chemin.Bounding_Box_y_max_set)
    def __init__(self): 
        this = _recherche_chemin.new_Bounding_Box()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _recherche_chemin.delete_Bounding_Box
    __del__ = lambda self : None;
Bounding_Box_swigregister = _recherche_chemin.Bounding_Box_swigregister
Bounding_Box_swigregister(Bounding_Box)
cvar = _recherche_chemin.cvar
FIOS_PRECISION = cvar.FIOS_PRECISION

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self) -> "float" : return _recherche_chemin.Point_x(self)
    def y(self) -> "float" : return _recherche_chemin.Point_y(self)
    def projection_onto(self, *args) -> "VisiLibity::Point" : return _recherche_chemin.Point_projection_onto(self, *args)
    def projection_onto_vertices_of(self, *args) -> "VisiLibity::Point" : return _recherche_chemin.Point_projection_onto_vertices_of(self, *args)
    def projection_onto_boundary_of(self, *args) -> "VisiLibity::Point" : return _recherche_chemin.Point_projection_onto_boundary_of(self, *args)
    def on_boundary_of(self, *args) -> "bool" : return _recherche_chemin.Point_on_boundary_of(self, *args)
    def in_relative_interior_of(self, *args) -> "bool" : return _recherche_chemin.Point_in_relative_interior_of(self, *args)
    def _in(self, *args) -> "bool" : return _recherche_chemin.Point__in(self, *args)
    def is_endpoint_of(self, *args) -> "bool" : return _recherche_chemin.Point_is_endpoint_of(self, *args)
    def set_x(self, *args) -> "void" : return _recherche_chemin.Point_set_x(self, *args)
    def set_y(self, *args) -> "void" : return _recherche_chemin.Point_set_y(self, *args)
    def snap_to_vertices_of(self, *args) -> "void" : return _recherche_chemin.Point_snap_to_vertices_of(self, *args)
    def snap_to_boundary_of(self, *args) -> "void" : return _recherche_chemin.Point_snap_to_boundary_of(self, *args)
    __swig_destroy__ = _recherche_chemin.delete_Point
    __del__ = lambda self : None;
Point_swigregister = _recherche_chemin.Point_swigregister
Point_swigregister(Point)


def cross(*args) -> "float" :
  return _recherche_chemin.cross(*args)
cross = _recherche_chemin.cross
class Line_Segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line_Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Line_Segment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Line_Segment(*args)
        try: self.this.append(this)
        except: self.this = this
    def first(self) -> "VisiLibity::Point" : return _recherche_chemin.Line_Segment_first(self)
    def second(self) -> "VisiLibity::Point" : return _recherche_chemin.Line_Segment_second(self)
    def size(self) -> "unsigned int" : return _recherche_chemin.Line_Segment_size(self)
    def midpoint(self) -> "VisiLibity::Point" : return _recherche_chemin.Line_Segment_midpoint(self)
    def length(self) -> "float" : return _recherche_chemin.Line_Segment_length(self)
    def is_in_standard_form(self) -> "bool" : return _recherche_chemin.Line_Segment_is_in_standard_form(self)
    def set_first(self, *args) -> "void" : return _recherche_chemin.Line_Segment_set_first(self, *args)
    def set_second(self, *args) -> "void" : return _recherche_chemin.Line_Segment_set_second(self, *args)
    def reverse(self) -> "void" : return _recherche_chemin.Line_Segment_reverse(self)
    def enforce_standard_form(self) -> "void" : return _recherche_chemin.Line_Segment_enforce_standard_form(self)
    def clear(self) -> "void" : return _recherche_chemin.Line_Segment_clear(self)
    __swig_destroy__ = _recherche_chemin.delete_Line_Segment
    __del__ = lambda self : None;
Line_Segment_swigregister = _recherche_chemin.Line_Segment_swigregister
Line_Segment_swigregister(Line_Segment)

def __mul__(*args) -> "VisiLibity::Point" :
  return _recherche_chemin.__mul__(*args)
__mul__ = _recherche_chemin.__mul__

class Angle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Angle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Angle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Angle(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self) -> "float" : return _recherche_chemin.Angle_get(self)
    def set(self, *args) -> "void" : return _recherche_chemin.Angle_set(self, *args)
    def set_to_2pi(self) -> "void" : return _recherche_chemin.Angle_set_to_2pi(self)
    def randomize(self) -> "void" : return _recherche_chemin.Angle_randomize(self)
    __swig_destroy__ = _recherche_chemin.delete_Angle
    __del__ = lambda self : None;
Angle_swigregister = _recherche_chemin.Angle_swigregister
Angle_swigregister(Angle)

def distance(*args) -> "float" :
  return _recherche_chemin.distance(*args)
distance = _recherche_chemin.distance

def intersect(*args) -> "bool" :
  return _recherche_chemin.intersect(*args)
intersect = _recherche_chemin.intersect

def intersect_proper(*args) -> "bool" :
  return _recherche_chemin.intersect_proper(*args)
intersect_proper = _recherche_chemin.intersect_proper


def geodesic_distance(*args) -> "float" :
  return _recherche_chemin.geodesic_distance(*args)
geodesic_distance = _recherche_chemin.geodesic_distance

def geodesic_direction(*args) -> "float" :
  return _recherche_chemin.geodesic_direction(*args)
geodesic_direction = _recherche_chemin.geodesic_direction
class Polar_Point(Point):
    __swig_setmethods__ = {}
    for _s in [Point]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polar_Point, name, value)
    __swig_getmethods__ = {}
    for _s in [Point]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polar_Point, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Polar_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    def polar_origin(self) -> "VisiLibity::Point" : return _recherche_chemin.Polar_Point_polar_origin(self)
    def range(self) -> "float" : return _recherche_chemin.Polar_Point_range(self)
    def bearing(self) -> "VisiLibity::Angle" : return _recherche_chemin.Polar_Point_bearing(self)
    def set_polar_origin(self, *args) -> "void" : return _recherche_chemin.Polar_Point_set_polar_origin(self, *args)
    def set_x(self, *args) -> "void" : return _recherche_chemin.Polar_Point_set_x(self, *args)
    def set_y(self, *args) -> "void" : return _recherche_chemin.Polar_Point_set_y(self, *args)
    def set_range(self, *args) -> "void" : return _recherche_chemin.Polar_Point_set_range(self, *args)
    def set_bearing(self, *args) -> "void" : return _recherche_chemin.Polar_Point_set_bearing(self, *args)
    def set_bearing_to_2pi(self) -> "void" : return _recherche_chemin.Polar_Point_set_bearing_to_2pi(self)
    __swig_destroy__ = _recherche_chemin.delete_Polar_Point
    __del__ = lambda self : None;
Polar_Point_swigregister = _recherche_chemin.Polar_Point_swigregister
Polar_Point_swigregister(Polar_Point)

def __add__(*args) -> "VisiLibity::Angle" :
  return _recherche_chemin.__add__(*args)
__add__ = _recherche_chemin.__add__

def __sub__(*args) -> "VisiLibity::Angle" :
  return _recherche_chemin.__sub__(*args)
__sub__ = _recherche_chemin.__sub__

class Ray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Ray(*args)
        try: self.this.append(this)
        except: self.this = this
    def base_point(self) -> "VisiLibity::Point" : return _recherche_chemin.Ray_base_point(self)
    def bearing(self) -> "VisiLibity::Angle" : return _recherche_chemin.Ray_bearing(self)
    def set_base_point(self, *args) -> "void" : return _recherche_chemin.Ray_set_base_point(self, *args)
    def set_bearing(self, *args) -> "void" : return _recherche_chemin.Ray_set_bearing(self, *args)
    __swig_destroy__ = _recherche_chemin.delete_Ray
    __del__ = lambda self : None;
Ray_swigregister = _recherche_chemin.Ray_swigregister
Ray_swigregister(Ray)

def __gt__(*args) -> "bool" :
  return _recherche_chemin.__gt__(*args)
__gt__ = _recherche_chemin.__gt__

def __lt__(*args) -> "bool" :
  return _recherche_chemin.__lt__(*args)
__lt__ = _recherche_chemin.__lt__

def __ge__(*args) -> "bool" :
  return _recherche_chemin.__ge__(*args)
__ge__ = _recherche_chemin.__ge__

def __le__(*args) -> "bool" :
  return _recherche_chemin.__le__(*args)
__le__ = _recherche_chemin.__le__

class Polyline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polyline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polyline, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Polyline(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_Point(self, *args) -> "VisiLibity::Point" : return _recherche_chemin.Polyline_get_Point(self, *args)
    def size(self) -> "unsigned int" : return _recherche_chemin.Polyline_size(self)
    def length(self) -> "float" : return _recherche_chemin.Polyline_length(self)
    def diameter(self) -> "float" : return _recherche_chemin.Polyline_diameter(self)
    def bbox(self) -> "VisiLibity::Bounding_Box" : return _recherche_chemin.Polyline_bbox(self)
    def clear(self) -> "void" : return _recherche_chemin.Polyline_clear(self)
    def push_back(self, *args) -> "void" : return _recherche_chemin.Polyline_push_back(self, *args)
    def pop_back(self) -> "void" : return _recherche_chemin.Polyline_pop_back(self)
    def set_vertices(self, *args) -> "void" : return _recherche_chemin.Polyline_set_vertices(self, *args)
    def eliminate_redundant_vertices(self, epsilon : 'float' = 0.0) -> "void" : return _recherche_chemin.Polyline_eliminate_redundant_vertices(self, epsilon)
    def reverse(self) -> "void" : return _recherche_chemin.Polyline_reverse(self)
    def append(self, *args) -> "void" : return _recherche_chemin.Polyline_append(self, *args)
    __swig_destroy__ = _recherche_chemin.delete_Polyline
    __del__ = lambda self : None;
Polyline_swigregister = _recherche_chemin.Polyline_swigregister
Polyline_swigregister(Polyline)

def intersection(*args) -> "VisiLibity::Line_Segment" :
  return _recherche_chemin.intersection(*args)
intersection = _recherche_chemin.intersection

class Polygon(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Polygon(*args)
        try: self.this.append(this)
        except: self.this = this
    def n(self) -> "unsigned int" : return _recherche_chemin.Polygon_n(self)
    def r(self) -> "unsigned int" : return _recherche_chemin.Polygon_r(self)
    def is_simple(self, epsilon : 'float' = 0.0) -> "bool" : return _recherche_chemin.Polygon_is_simple(self, epsilon)
    def is_in_standard_form(self) -> "bool" : return _recherche_chemin.Polygon_is_in_standard_form(self)
    def boundary_length(self) -> "float" : return _recherche_chemin.Polygon_boundary_length(self)
    def area(self) -> "float" : return _recherche_chemin.Polygon_area(self)
    def centroid(self) -> "VisiLibity::Point" : return _recherche_chemin.Polygon_centroid(self)
    def diameter(self) -> "float" : return _recherche_chemin.Polygon_diameter(self)
    def bbox(self) -> "VisiLibity::Bounding_Box" : return _recherche_chemin.Polygon_bbox(self)
    def random_points(self, *args) -> "std::vector< VisiLibity::Point >" : return _recherche_chemin.Polygon_random_points(self, *args)
    def write_to_file(self, *args) -> "void" : return _recherche_chemin.Polygon_write_to_file(self, *args)
    def set_vertices(self, *args) -> "void" : return _recherche_chemin.Polygon_set_vertices(self, *args)
    def push_back(self, *args) -> "void" : return _recherche_chemin.Polygon_push_back(self, *args)
    def clear(self) -> "void" : return _recherche_chemin.Polygon_clear(self)
    def enforce_standard_form(self) -> "void" : return _recherche_chemin.Polygon_enforce_standard_form(self)
    def eliminate_redundant_vertices(self, epsilon : 'float' = 0.0) -> "void" : return _recherche_chemin.Polygon_eliminate_redundant_vertices(self, epsilon)
    def reverse(self) -> "void" : return _recherche_chemin.Polygon_reverse(self)
    __swig_destroy__ = _recherche_chemin.delete_Polygon
    __del__ = lambda self : None;
Polygon_swigregister = _recherche_chemin.Polygon_swigregister
Polygon_swigregister(Polygon)

class Environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Environment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Environment(*args)
        try: self.this.append(this)
        except: self.this = this
    def h(self) -> "unsigned int" : return _recherche_chemin.Environment_h(self)
    def n(self) -> "unsigned int" : return _recherche_chemin.Environment_n(self)
    def r(self) -> "unsigned int" : return _recherche_chemin.Environment_r(self)
    def is_in_standard_form(self) -> "bool" : return _recherche_chemin.Environment_is_in_standard_form(self)
    def is_valid(self, epsilon : 'float' = 0.0) -> "bool" : return _recherche_chemin.Environment_is_valid(self, epsilon)
    def boundary_length(self) -> "float" : return _recherche_chemin.Environment_boundary_length(self)
    def area(self) -> "float" : return _recherche_chemin.Environment_area(self)
    def diameter(self) -> "float" : return _recherche_chemin.Environment_diameter(self)
    def bbox(self) -> "VisiLibity::Bounding_Box" : return _recherche_chemin.Environment_bbox(self)
    def random_points(self, *args) -> "std::vector< VisiLibity::Point >" : return _recherche_chemin.Environment_random_points(self, *args)
    def shortest_path(self, *args) -> "VisiLibity::Polyline" : return _recherche_chemin.Environment_shortest_path(self, *args)
    def compute_partition_cells(self, *args) -> "std::vector< VisiLibity::Polygon >" : return _recherche_chemin.Environment_compute_partition_cells(self, *args)
    def write_to_file(self, *args) -> "void" : return _recherche_chemin.Environment_write_to_file(self, *args)
    def __call__(self, *args) -> "VisiLibity::Point &" : return _recherche_chemin.Environment___call__(self, *args)
    def set_outer_boundary(self, *args) -> "void" : return _recherche_chemin.Environment_set_outer_boundary(self, *args)
    def add_hole(self, *args) -> "void" : return _recherche_chemin.Environment_add_hole(self, *args)
    def enforce_standard_form(self) -> "void" : return _recherche_chemin.Environment_enforce_standard_form(self)
    def eliminate_redundant_vertices(self, epsilon : 'float' = 0.0) -> "void" : return _recherche_chemin.Environment_eliminate_redundant_vertices(self, epsilon)
    def reverse_holes(self) -> "void" : return _recherche_chemin.Environment_reverse_holes(self)
    __swig_destroy__ = _recherche_chemin.delete_Environment
    __del__ = lambda self : None;
Environment_swigregister = _recherche_chemin.Environment_swigregister
Environment_swigregister(Environment)

def __eq__(*args) -> "bool" :
  return _recherche_chemin.__eq__(*args)
__eq__ = _recherche_chemin.__eq__

def __ne__(*args) -> "bool" :
  return _recherche_chemin.__ne__(*args)
__ne__ = _recherche_chemin.__ne__

def equivalent(*args) -> "bool" :
  return _recherche_chemin.equivalent(*args)
equivalent = _recherche_chemin.equivalent

def boundary_distance(*args) -> "float" :
  return _recherche_chemin.boundary_distance(*args)
boundary_distance = _recherche_chemin.boundary_distance

class Guards(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Guards, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Guards, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Guards(*args)
        try: self.this.append(this)
        except: self.this = this
    def N(self) -> "unsigned int" : return _recherche_chemin.Guards_N(self)
    def are_lex_ordered(self) -> "bool" : return _recherche_chemin.Guards_are_lex_ordered(self)
    def noncolocated(self, epsilon : 'float' = 0.0) -> "bool" : return _recherche_chemin.Guards_noncolocated(self, epsilon)
    def _in(self, *args) -> "bool" : return _recherche_chemin.Guards__in(self, *args)
    def diameter(self) -> "float" : return _recherche_chemin.Guards_diameter(self)
    def bbox(self) -> "VisiLibity::Bounding_Box" : return _recherche_chemin.Guards_bbox(self)
    def write_to_file(self, *args) -> "void" : return _recherche_chemin.Guards_write_to_file(self, *args)
    def push_back(self, *args) -> "void" : return _recherche_chemin.Guards_push_back(self, *args)
    def set_positions(self, *args) -> "void" : return _recherche_chemin.Guards_set_positions(self, *args)
    def enforce_lex_order(self) -> "void" : return _recherche_chemin.Guards_enforce_lex_order(self)
    def reverse(self) -> "void" : return _recherche_chemin.Guards_reverse(self)
    def snap_to_vertices_of(self, *args) -> "void" : return _recherche_chemin.Guards_snap_to_vertices_of(self, *args)
    def snap_to_boundary_of(self, *args) -> "void" : return _recherche_chemin.Guards_snap_to_boundary_of(self, *args)
    __swig_destroy__ = _recherche_chemin.delete_Guards
    __del__ = lambda self : None;
Guards_swigregister = _recherche_chemin.Guards_swigregister
Guards_swigregister(Guards)

class Visibility_Polygon(Polygon):
    __swig_setmethods__ = {}
    for _s in [Polygon]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Visibility_Polygon, name, value)
    __swig_getmethods__ = {}
    for _s in [Polygon]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Visibility_Polygon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Visibility_Polygon(*args)
        try: self.this.append(this)
        except: self.this = this
    def observer(self) -> "VisiLibity::Point" : return _recherche_chemin.Visibility_Polygon_observer(self)
    __swig_destroy__ = _recherche_chemin.delete_Visibility_Polygon
    __del__ = lambda self : None;
Visibility_Polygon_swigregister = _recherche_chemin.Visibility_Polygon_swigregister
Visibility_Polygon_swigregister(Visibility_Polygon)

class Visibility_Graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Visibility_Graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Visibility_Graph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _recherche_chemin.new_Visibility_Graph(*args)
        try: self.this.append(this)
        except: self.this = this
    def n(self) -> "unsigned int" : return _recherche_chemin.Visibility_Graph_n(self)
    def __call__(self, *args) -> "bool &" : return _recherche_chemin.Visibility_Graph___call__(self, *args)
    __swig_destroy__ = _recherche_chemin.delete_Visibility_Graph
    __del__ = lambda self : None;
Visibility_Graph_swigregister = _recherche_chemin.Visibility_Graph_swigregister
Visibility_Graph_swigregister(Visibility_Graph)

# This file is compatible with both classic and new-style classes.


def __lshift__(*args) -> "std::ostream &" :
  return _recherche_chemin.__lshift__(*args)
__lshift__ = _recherche_chemin.__lshift__

